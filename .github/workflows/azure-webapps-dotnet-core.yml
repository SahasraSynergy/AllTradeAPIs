# This workflow builds and deploys an ASP.NET Core app to an Azure Web App whenever a commit is pushed to the default branch.
#
# Prerequisites:
# 1. Ensure the Azure App Service web app has been created.
#    Guide: https://docs.microsoft.com/en-us/azure/app-service/quickstart-dotnetcore?tabs=net60&pivots=development-environment-vscode
#
# 2. Download the Publish Profile for your Azure Web App from the Azure Portal's Overview page.
#    Guide: https://docs.microsoft.com/en-us/azure/app-service/deploy-github-actions?tabs=applevel#generate-deployment-credentials
#
# 3. Create a repository secret named `AZURE_WEBAPP_PUBLISH_PROFILE` and paste the publish profile content.
#    Guide: https://docs.microsoft.com/azure/app-service/deploy-github-actions#configure-the-github-secret
#
# 4. Update `AZURE_WEBAPP_NAME`, `AZURE_WEBAPP_PACKAGE_PATH`, and `DOTNET_VERSION` as required.

name: Build and deploy ASP.NET Core app to Azure Web App

env:
  AZURE_WEBAPP_NAME: trade-api         # Name of your Azure Web App
  AZURE_WEBAPP_PACKAGE_PATH: './TradingAPIs' # Path to the web app project (relative to the repository root)
  DOTNET_VERSION: '8'                     # .NET Core version to use

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up .NET Core environment
      - name: Set up .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      # Step 3: Set up caching for dependencies
      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      # Step 4: Build the project
      - name: Build the project
        run: |
          cd ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
          dotnet build --configuration Release

      # Step 5: Publish the project
      - name: Publish the project
        run: |
          cd ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
          #cd ..
          dotnet publish --configuration Release --output ./publish
       # Step 6: Debug: Verify publish directory
      - name: List files in publish directory
        run: |
          echo "Checking the publish directory:"
          ls -R ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/publish
          #ls -R ./publish
          
      # Step 7: Upload artifact for deployment
      - name: Upload deployment artifact
        uses: actions/upload-artifact@v3
        with:
          name: dotnet-app
          #path: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/publish
          path: ./publish

  deploy:
    permissions:
      contents: none
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: "Development"
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      # Step 1: Download artifact from the build job
      - name: Download deployment artifact
        uses: actions/download-artifact@v3
        with:
          name: dotnet-app
      # Step 2: Log in to Azure
      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      # Step 3: Deploy the app to Azure Web App
      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/publish
