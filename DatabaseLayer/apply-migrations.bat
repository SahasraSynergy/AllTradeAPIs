@echo off

:: Set paths and variables
set PROJECT_DIR=C:\Varsha-Personal\Sahashra Synergy\Trading APIS\AllTradeAPIs\DatabaseLayer
set MIGRATION_NAME=AutoGeneratedMigration
set DB_CONTEXT=AppDbContext
set PIPELINE_OUTPUT_DIR=%PROJECT_DIR%\Migrations
set DATABASE_LAYER_PROJECT=%PROJECT_DIR%\DatabaseLayer.csproj
set CONNECTION_STRING=Host=oregon-postgres.render.com;Port=5432;Database=trade_pgs_db;Username=trade_pgs_db_user;Password=1O4gXP71zC1O8qbo94tJwwGOGT3LwxCT;SslMode=Require;TrustServerCertificate=True;
set LOG_FILE=apply-migrations.log

:: Clear the log file if it already exists
if exist %LOG_FILE% del %LOG_FILE%

:: Ensure the script directory is correct
cd /d "%PROJECT_DIR%"

:: Verify if the .csproj file exists
if not exist "%DATABASE_LAYER_PROJECT%" (
    echo ERROR: DatabaseLayer.csproj not found at %DATABASE_LAYER_PROJECT% >> %LOG_FILE%
    exit /b 1
)

:: Check for pending migrations
dotnet ef migrations list --project "%DATABASE_LAYER_PROJECT%" -c %DB_CONTEXT% >> %LOG_FILE% 2>&1
if %ERRORLEVEL% NEQ 0 (
    echo INFO: No migrations found. Adding a new migration... >> %LOG_FILE%

    :: Remove the existing migration if needed
    if exist "%PROJECT_DIR%\Migrations\%MIGRATION_NAME%.cs" (
        echo Removing previous migration... >> %LOG_FILE%
        dotnet ef migrations remove -c %DB_CONTEXT% --project "%DATABASE_LAYER_PROJECT%" -f >> %LOG_FILE% 2>&1
    ) else (
        echo Previous migration does not exist... >> %LOG_FILE%
    )
)

:: Add a new migration
echo Adding a new migration... >> %LOG_FILE%
dotnet ef migrations add %MIGRATION_NAME% -c %DB_CONTEXT% --project "%DATABASE_LAYER_PROJECT%" >> %LOG_FILE% 2>&1

:: Check for errors after migration creation
if %ERRORLEVEL% NEQ 0 (
    echo ERROR: Failed to add migration. Check the logs for details. >> %LOG_FILE%
    echo ERROR: Failed to add migration. Check %LOG_FILE% for details.
    exit /b 1
)

:: Apply migrations to the database with retries
set RETRY_COUNT=3
set SUCCESS=0
for /L %%i in (1,1,%RETRY_COUNT%) do (
    echo Attempt %%i: Applying database updates... >> %LOG_FILE%
    dotnet ef database update -c %DB_CONTEXT% --project "%DATABASE_LAYER_PROJECT%" >> %LOG_FILE% 2>&1
    if %ERRORLEVEL% EQU 0 (
        set SUCCESS=1
        goto :SUCCESS
    )
    echo Waiting before retry... >> %LOG_FILE%
    timeout /t 3 /nobreak >nul
)

if %SUCCESS% EQU 0 (
    echo ERROR: Failed to apply database updates after %RETRY_COUNT% attempts. >> %LOG_FILE%
    echo ERROR: Failed to apply database updates after %RETRY_COUNT% attempts.
    exit /b 1
)

:SUCCESS
echo SUCCESS: Database updated successfully. >> %LOG_FILE%
echo SUCCESS: Database updated successfully.

:: Copy migrations to pipeline directory
if not exist "%PIPELINE_OUTPUT_DIR%" (
    mkdir "%PIPELINE_OUTPUT_DIR%"
)
xcopy /Y /E "%PROJECT_DIR%\Migrations" "%PIPELINE_OUTPUT_DIR%" >> %LOG_FILE% 2>&1

echo SUCCESS: Migrations and updates completed successfully. >> %LOG_FILE%
echo SUCCESS: Migrations and updates completed successfully.
pause
