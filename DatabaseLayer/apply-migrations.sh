#!/bin/bash

# Set paths and variables
PROJECT_DIR="."
MIGRATION_NAME="AutoGeneratedMigration"
DB_CONTEXT="AppDbContext"
PIPELINE_OUTPUT_DIR="./Migrations"
DATABASE_LAYER_PROJECT="DatabaseLayer"
STARTUP_PROJECT="TradingAPIs"

# Step 1: Development Environment
cd "$PROJECT_DIR"
echo "Running Entity Framework updates in Development Environment..."

# Check if there are any pending migrations
echo "Checking for pending migrations..."
dotnet ef migrations list --project "$DATABASE_LAYER_PROJECT/DatabaseLayer.csproj" --startup-project "$STARTUP_PROJECT/TradingAPIs.csproj" -c "$DB_CONTEXT" > /dev/null 2>&1

# Check if migrations exist and create if none exist
if [ $? -ne 0 ]; then
    echo "No migrations found. Adding new migration..."
    
    # Remove any existing migration if necessary (optional)
    if [ -f "$PROJECT_DIR/$DATABASE_LAYER_PROJECT/Migrations/$MIGRATION_NAME.cs" ]; then
        echo "Removing previous migration..."
        dotnet ef migrations remove -c "$DB_CONTEXT" --project "$DATABASE_LAYER_PROJECT/DatabaseLayer.csproj" --startup-project "$STARTUP_PROJECT/TradingAPIs.csproj" -f
    else
        echo "No previous migration found to remove."
    fi
    
    # Add a new migration
    dotnet ef migrations add "$MIGRATION_NAME" -c "$DB_CONTEXT" --project "$DATABASE_LAYER_PROJECT/DatabaseLayer.csproj" --startup-project "$STARTUP_PROJECT/TradingAPIs.csproj"

    if [ $? -ne 0 ]; then
        echo "Failed to add migration. Exiting."
        exit 1
    else
        echo "New migration added successfully."
    fi
else
    echo "Migrations already applied, skipping migration creation."
fi

# Step 2: Update the Database
echo "Applying the migration..."
dotnet ef database update -c "$DB_CONTEXT" --project "$DATABASE_LAYER_PROJECT/DatabaseLayer.csproj" --startup-project "$STARTUP_PROJECT/TradingAPIs.csproj"

if [ $? -ne 0 ]; then
    echo "Failed to update the database. Exiting."
    exit 1
else
    echo "Database updated successfully."
fi

# Step 3: Git Pipeline Preparation
echo "Preparing migrations for Git pipeline..."

# Ensure pipeline output directory exists
if [ ! -d "$PIPELINE_OUTPUT_DIR" ]; then
    mkdir "$PIPELINE_OUTPUT_DIR"
else
    echo "Pipeline output directory already exists."
fi

# Copy migrations to pipeline directory
cp -r "$PROJECT_DIR/$DATABASE_LAYER_PROJECT/Migrations" "$PIPELINE_OUTPUT_DIR"

# Completion message
echo "Entity Framework updates and migrations have been completed."
